// Generated by CoffeeScript 1.3.3

/*

A simple, unobtrusive jQuery plugin to overlay an image or images 
(as a gallery) on top of the page in a fixed container.

Built with jQuery 1.8.3
https://github.com/javierjulio/lightbox2
*/


(function() {
  var Lightbox,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Lightbox = (function() {

    function Lightbox(linkElement, options) {
      this.linkElement = linkElement;
      this.keyboardAction = __bind(this.keyboardAction, this);

      this.start = __bind(this.start, this);

      this.album = [];
      this.currentImageIndex = void 0;
      this.element = void 0;
      this.options = $.extend({}, $.fn.lightbox.defaults, options, this.linkElement.data());
      this.build();
    }

    Lightbox.prototype.build = function() {
      $(this.options.htmlTemplate).appendTo(document.body);
    };

    Lightbox.prototype.start = function($link) {
      var $element, a, elements, i, selectedImageIndex, _i, _len;
      this.element = $('#lightbox');
      this.album = [];
      selectedImageIndex = 0;
      if ($link.attr('rel') === 'lightbox') {
        elements = [$link];
        $link.data('lightbox', this);
      } else {
        elements = $($link.prop("tagName") + '[rel="' + $link.attr('rel') + '"]');
        elements.data('lightbox', this);
      }
      for (i = _i = 0, _len = elements.length; _i < _len; i = ++_i) {
        a = elements[i];
        $element = $(a);
        this.album.push({
          link: $element.attr('href'),
          title: $element.attr('title')
        });
        if ($element.attr('href') === $link.attr('href')) {
          selectedImageIndex = i;
        }
      }
      this.element.removeClass('transition-hidden');
      this.changeImage(selectedImageIndex);
      this.updateDetails();
      this.enableClickActions();
      this.enableKeyboardActions();
    };

    Lightbox.prototype.changeImage = function(index) {
      var $image, preloader,
        _this = this;
      this.currentImageIndex = index;
      $image = this.element.find('.lb-image');
      if (Modernizr.csstransitions) {
        $image.addClass('transition-hidden');
      } else {
        $image.hide();
      }
      this.element.find('.lb-progress-container').show();
      this.element.find('.lb-prev, .lb-next').hide();
      preloader = new Image;
      preloader.onload = function() {
        $image.attr('src', _this.album[index].link);
        return _this.showImage();
      };
      preloader.src = this.album[index].link;
    };

    Lightbox.prototype.showImage = function() {
      this.element.find('.lb-progress-container').hide();
      if (Modernizr.csstransitions) {
        this.element.find('.lb-image').removeClass('transition-hidden');
      } else {
        this.element.find('.lb-image').show();
      }
      this.updateDetails();
      this.updateNavigation();
      this.preloadNeighboringImages();
    };

    Lightbox.prototype.enableNavigation = function() {
      this.enableKeyboardActions();
      this.updateNavigation();
    };

    Lightbox.prototype.disableNavigation = function() {
      this.disableKeyboardActions();
      this.element.find('.lb-prev, .lb-next').hide();
    };

    Lightbox.prototype.updateNavigation = function() {
      if (this.currentImageIndex > 0) {
        this.element.find('.lb-prev').show();
      }
      if (this.currentImageIndex < this.album.length - 1) {
        this.element.find('.lb-next').show();
      }
    };

    Lightbox.prototype.updateDetails = function() {
      var countLabel, title;
      title = "&nbsp;";
      countLabel = "";
      if ((this.album[this.currentImageIndex].title != null) && this.album[this.currentImageIndex].title !== "") {
        title = this.album[this.currentImageIndex].title;
      }
      this.element.find('.lb-title').html(title);
      if (this.album.length > 1) {
        countLabel = "" + this.options.labelImage + " " + (this.currentImageIndex + 1) + " " + this.options.labelOf + " " + this.album.length;
      }
      this.element.find('.lb-number').html(countLabel);
    };

    Lightbox.prototype.preloadNeighboringImages = function() {
      var preloadNext, preloadPrev;
      if (this.album.length > this.currentImageIndex + 1) {
        preloadNext = new Image;
        preloadNext.src = this.album[this.currentImageIndex + 1].link;
      }
      if (this.currentImageIndex > 0) {
        preloadPrev = new Image;
        preloadPrev.src = this.album[this.currentImageIndex - 1].link;
      }
    };

    Lightbox.prototype.enableClickActions = function() {
      var _this = this;
      this.element.on('click.lightbox', function(event) {
        if ($(event.target).attr('id') === 'lightbox') {
          return _this.end();
        }
      }).on('click.lightbox', '.lb-prev', function(event) {
        event.preventDefault();
        event.stopPropagation();
        return _this.changeImage(_this.currentImageIndex - 1);
      }).on('click.lightbox', '.lb-next', function(event) {
        event.preventDefault();
        event.stopPropagation();
        return _this.changeImage(_this.currentImageIndex + 1);
      }).on('click.lightbox', '.lb-close', function(event) {
        event.preventDefault();
        event.stopPropagation();
        return _this.end();
      });
      return $(window).on('resize.lightbox', function(event) {
        var imageContainer;
        imageContainer = _this.element.find('.lb-image-container');
        return imageContainer.css('line-height', "" + (imageContainer.height()) + "px");
      }).trigger('resize.lightbox');
    };

    Lightbox.prototype.disableClickActions = function() {
      this.element.off('click.lightbox');
      return $(window).off('resize.lightbox');
    };

    Lightbox.prototype.enableKeyboardActions = function() {
      $(document).on('keyup.lightbox', this.keyboardAction);
    };

    Lightbox.prototype.disableKeyboardActions = function() {
      $(document).off('keyup.lightbox');
    };

    Lightbox.prototype.keyboardAction = function(event) {
      var KEYCODE_ESC, KEYCODE_LEFTARROW, KEYCODE_RIGHTARROW, keycode;
      KEYCODE_ESC = 27;
      KEYCODE_LEFTARROW = 37;
      KEYCODE_RIGHTARROW = 39;
      keycode = event.keyCode;
      if (keycode === KEYCODE_ESC) {
        this.end();
      } else if (keycode === KEYCODE_LEFTARROW) {
        if (this.currentImageIndex !== 0) {
          this.changeImage(this.currentImageIndex - 1);
        }
      } else if (keycode === KEYCODE_RIGHTARROW) {
        if (this.currentImageIndex < this.album.length - 1) {
          this.changeImage(this.currentImageIndex + 1);
        }
      }
    };

    Lightbox.prototype.end = function() {
      this.disableKeyboardActions();
      this.disableClickActions();
      this.element.find('.lb-image').replaceWith('<img class="lb-image transition-hidden"/>');
      return this.element.addClass('transition-hidden');
    };

    return Lightbox;

  })();

  $(document).on('click', 'a[rel^=lightbox], area[rel^=lightbox]', function(event) {
    event.preventDefault();
    event.stopPropagation();
    return $(this).lightbox();
  });

  $.fn.lightbox = function(options) {
    return this.each(function() {
      var $el, data;
      $el = $(this);
      data = $el.data('lightbox');
      if (!data) {
        $el.data('lightbox', (data = new Lightbox($el, options)));
      }
      return data.start($el);
    });
  };

  $.fn.lightbox.Constructor = Lightbox;

  $.fn.lightbox.defaults = {
    labelImage: 'Image',
    labelOf: 'of',
    htmlTemplate: "<div id=\"lightbox\" class=\"transition-hidden\">\n  <div class=\"lb-outer-container\">\n    <a class=\"lb-close\">&times;</a>\n    <div class=\"lb-image-container\">\n      <img class=\"lb-image transition-hidden\">\n      <div class=\"lb-nav\">\n        <div class=\"lb-prev\"></div>\n        <div class=\"lb-next\"></div>\n      </div>\n      <div class=\"lb-progress-container\">\n        <div class=\"lb-progress\">Loading...</div>\n      </div>\n    </div>\n    <div class=\"lb-footer\">\n      <div class=\"lb-title-container\">\n        <div class=\"lb-title\"></div>\n        <div class=\"lb-number\"></div>\n      </div>\n    </div>\n  </div>\n</div>"
  };

}).call(this);
